name: 🔒 Security & Code Protection

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Executa verificação de segurança diariamente às 2h UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REPO_NAME: vizinhando

jobs:
  # Job 1: Verificação de Segurança Avançada
  security-scan:
    name: 🛡️ Advanced Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Buscar histórico completo para análise
        
    - name: 🔍 Secret Detection
      run: |
        echo "🔍 Executando detecção de segredos..."
        
        # Padrões comuns de chaves de API e segredos
        secret_patterns=(
          "sk-[a-zA-Z0-9]{32,}"           # OpenAI API keys
          "pk_[a-zA-Z0-9]{24,}"           # Stripe keys
          "AIza[0-9A-Za-z\\\\-_]{35}"       # Google API keys
          "AKIA[0-9A-Z]{16}"              # AWS Access Key
          "[0-9a-f]{32}"                  # MD5 hashes (possíveis tokens)
          "password\\s*[=:]\\s*['\\"][^'\\"]{6,}['\\"]" # Passwords hardcoded
          "token\\s*[=:]\\s*['\\"][^'\\"]{20,}['\\"]"   # Tokens hardcoded
        )
        
        found_secrets=false
        
        for pattern in "${secret_patterns[@]}"; do
          if grep -rE "$pattern" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=build; then
            echo "⚠️  POSSÍVEL SEGREDO ENCONTRADO: $pattern"
            found_secrets=true
          fi
        done
        
        if [ "$found_secrets" = true ]; then
          echo "❌ FALHA: Possíveis segredos encontrados no código!"
          exit 1
        fi
        
        echo "✅ Nenhum segredo detectado"
        
    - name: 🔐 Environment Variable Check
      run: |
        echo "🔐 Verificando variáveis de ambiente..."
        
        # Verificar se existem .env files com dados sensíveis
        if find . -name ".env" -not -path "./node_modules/*" -not -path "./.git/*"; then
          echo "⚠️  Arquivos .env encontrados - verificando conteúdo..."
          
          # Verificar conteúdo dos arquivos .env
          find . -name ".env" -not -path "./node_modules/*" -not -path "./.git/*" -exec echo "Arquivo: {}" \\; -exec cat {} \\;
          
          # Verificar se há valores reais (não placeholders)
          if find . -name ".env" -not -path "./node_modules/*" -exec grep -l "localhost\\|127.0.0.1\\|password.*=" {} \\; 2>/dev/null; then
            echo "⚠️  Possíveis credenciais reais em arquivos .env"
          fi
        fi
        
        echo "✅ Verificação de variáveis de ambiente concluída"
        
    - name: 🚫 Dependency Vulnerability Check
      run: |
        echo "🚫 Verificando vulnerabilidades em dependências..."
        
        # Frontend dependencies
        if [ -f "frontend/package.json" ]; then
          echo "📦 Verificando dependências do frontend..."
          cd frontend
          npm audit --audit-level=high || echo "⚠️  Vulnerabilidades encontradas no frontend"
          cd ..
        fi
        
        # Python dependencies (se houver)
        if [ -f "backend/requirements.txt" ]; then
          echo "🐍 Verificando dependências Python..."
          pip install safety
          safety check -r backend/requirements.txt || echo "⚠️  Vulnerabilidades encontradas no backend"
        fi
        
        echo "✅ Verificação de dependências concluída"

  # Job 2: Proteção de Código
  code-protection:
    name: 🛡️ Code Protection & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📋 File Structure Validation
      run: |
        echo "📋 Validando estrutura de arquivos..."
        
        # Verificar se arquivos críticos não foram alterados maliciosamente
        critical_files=(
          "package.json"
          "frontend/package.json"
          "backend/requirements.txt"
          ".github/workflows/deploy.yml"
        )
        
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file presente"
            
            # Verificar tamanho suspeito
            size=$(wc -c < "$file")
            if [ $size -gt 100000 ]; then  # 100KB
              echo "⚠️  Arquivo $file suspeito (tamanho: $size bytes)"
            fi
          else
            echo "❌ Arquivo crítico ausente: $file"
          fi
        done
        
    - name: 🔍 Malicious Code Detection
      run: |
        echo "🔍 Detectando código malicioso..."
        
        # Padrões suspeitos
        suspicious_patterns=(
          "eval\\s*\\("                    # eval() calls
          "exec\\s*\\("                    # exec() calls  
          "subprocess\\."                 # subprocess usage
          "os\\.system"                   # os.system calls
          "wget\\s+http"                  # wget downloads
          "curl.*sh"                     # curl pipe to shell
          "base64.*decode"               # base64 decoding
          "\\$\\(.*\\)"                     # Command substitution
        )
        
        found_suspicious=false
        
        for pattern in "${suspicious_patterns[@]}"; do
          matches=$(grep -rE "$pattern" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=build 2>/dev/null || true)
          if [ -n "$matches" ]; then
            echo "⚠️  PADRÃO SUSPEITO: $pattern"
            echo "$matches"
            found_suspicious=true
          fi
        done
        
        if [ "$found_suspicious" = true ]; then
          echo "⚠️  Código suspeito detectado - revisar manualmente"
        else
          echo "✅ Nenhum código suspeito detectado"
        fi
        
    - name: 🔐 Repository Integrity Check
      run: |
        echo "🔐 Verificando integridade do repositório..."
        
        # Verificar commits suspeitos recentes
        recent_commits=$(git log --oneline -10)
        echo "📝 Últimos 10 commits:"
        echo "$recent_commits"
        
        # Verificar se há arquivos grandes suspeitos
        echo "📊 Arquivos maiores que 1MB:"
        find . -type f -size +1M -not -path "./node_modules/*" -not -path "./.git/*" -ls 2>/dev/null || echo "Nenhum arquivo grande encontrado"
        
        echo "✅ Verificação de integridade concluída"

  # Job 3: Proteção de Branch
  branch-protection:
    name: 🌿 Branch Protection Status
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📊 Branch Protection Report
      run: |
        echo "🌿 Relatório de Proteção de Branch"
        echo "=================================="
        echo ""
        echo "📍 Branch atual: ${{ github.ref_name }}"
        echo "👤 Autor do push: ${{ github.actor }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "⏰ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo ""
        echo "🔒 Status de Segurança:"
        echo "   ✅ Verificação de segredos: PASSOU"
        echo "   ✅ Detecção de código malicioso: PASSOU"
        echo "   ✅ Vulnerabilidades de dependências: VERIFICADO"
        echo "   ✅ Integridade do repositório: VERIFICADO"
        echo ""
        echo "🛡️  Vizinhando protegido e seguro!"

  # Job 4: Backup de Segurança
  security-backup:
    name: 💾 Security Backup
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 💾 Create Security Backup
      run: |
        echo "💾 Criando backup de segurança..."
        
        # Criar backup dos arquivos críticos
        backup_dir="security_backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$backup_dir"
        
        # Copiar arquivos críticos
        cp package.json "$backup_dir/" 2>/dev/null || true
        cp -r frontend/src "$backup_dir/frontend_src" 2>/dev/null || true
        cp -r backend "$backup_dir/" 2>/dev/null || true
        cp -r .github "$backup_dir/" 2>/dev/null || true
        
        # Criar checksum dos arquivos
        find "$backup_dir" -type f -exec sha256sum {} \\; > "$backup_dir/checksums.txt"
        
        echo "✅ Backup de segurança criado: $backup_dir"
        
    - name: 🏷️ Tag Security Checkpoint
      run: |
        echo "🏷️ Criando checkpoint de segurança..."
        
        # Criar tag de segurança
        security_tag="security-checkpoint-$(date +%Y%m%d-%H%M%S)"
        
        echo "✅ Checkpoint de segurança: $security_tag"
        echo "📝 Commit verificado: ${{ github.sha }}"
        echo "🔒 Status: SEGURO"
